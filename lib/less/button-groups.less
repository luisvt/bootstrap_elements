//
// Button groups
// --------------------------------------------------
html @{deep} {
// Make the div behave like a button
  bs-btn-group,
  bs-btn-group[vertical] {
    position: relative;
    display: inline-block;
    vertical-align: middle; // match button alignment given font-size hack above
    > button {
      position: relative;
      float: left;
      // Bring the "active" button to the front
      &:hover,
      &:focus,
      &:active,
      &.active {
        z-index: 2;
      }
    }
  }
  
  // Prevent double borders when buttons are next to each other
  bs-btn-group {
    button + button,
    button + bs-btn-group,
    bs-btn-group + button,
    bs-btn-group + bs-btn-group {
      margin-left: -1px;
    }
  }
  
  // Optional: Group multiple button groups together for a toolbar
  bs-btn-toolbar {
    margin-left: -5px; // Offset the first child's margin
    &:extend(.clearfix all);
  
    ::content bs-btn-group,
    .input-group {
      float: left;
    }
    > button,
    > bs-btn-group,
    > .input-group {
      margin-left: 5px;
    }
  }
  
  bs-btn-group > button:not(:first-child):not(:last-child):not(.dropdown-toggle) {
    border-radius: 0;
  }
  
  // Set corners individual because sometimes a single button can be in a bs-btn-group and we need :first-child and :last-child to both match
  bs-btn-group > button:first-child {
    margin-left: 0;
    &:not(:last-child):not(.dropdown-toggle) {
      .border-right-radius(0);
    }
  }
  // Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
  bs-btn-group > button:last-child:not(:first-child),
  bs-btn-group > .dropdown-toggle:not(:first-child) {
    .border-left-radius(0);
  }
  
  // Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
  bs-btn-group > bs-btn-group {
    float: left;
  }
  bs-btn-group > bs-btn-group:not(:first-child):not(:last-child) > button {
    border-radius: 0;
  }
  bs-btn-group > bs-btn-group:first-child:not(:last-child) {
    > button:last-child,
    > .dropdown-toggle {
      .border-right-radius(0);
    }
  }
  bs-btn-group > bs-btn-group:last-child:not(:first-child) > button:first-child {
    .border-left-radius(0);
  }
  
  // On active and open, don't show outline
  bs-btn-group .dropdown-toggle:active,
  bs-btn-group.open .dropdown-toggle {
    outline: 0;
  }
  
  
  // Sizing
  //
  // Remix the default button sizing classes into new ones for easier manipulation.
  
  bs-btn-group-xs > button { &:extend(button[xs]); }
  bs-btn-group-sm > button { &:extend(button[sm]); }
  bs-btn-group-lg > button { &:extend(button[lg]); }
  
  
  // Split button dropdowns
  // ----------------------
  
  // Give the line between buttons some depth
  bs-btn-group > button + .dropdown-toggle {
    padding-left: 8px;
    padding-right: 8px;
  }
  bs-btn-group > button[lg] + .dropdown-toggle {
    padding-left: 12px;
    padding-right: 12px;
  }
  
  // The clickable button for toggling the menu
  // Remove the gradient and set the same inset shadow as the :active state
  bs-btn-group.open .dropdown-toggle {
    .box-shadow(inset 0 3px 5px rgba(0,0,0,.125));
  
    // Show no shadow for `button[link]` since it has no other button styles.
    &button[link] {
      .box-shadow(none);
    }
  }
  
  
  // Reposition the caret
  button .caret {
    margin-left: 0;
  }
  // Carets in other button sizes
  button[lg] .caret {
    border-width: @caret-width-large @caret-width-large 0;
    border-bottom-width: 0;
  }
  // Upside down carets for .dropup
  .dropup button[lg] .caret {
    border-width: 0 @caret-width-large @caret-width-large;
  }
  
  
  // Vertical button groups
  // ----------------------
  
  bs-btn-group[vertical] {
    > button,
    > bs-btn-group,
    > bs-btn-group > button {
      display: block;
      float: none;
      width: 100%;
      max-width: 100%;
    }
  
    // Clear floats so dropdown menus can be properly placed
    > bs-btn-group {
      &:extend(.clearfix all);
      > button {
        float: none;
      }
    }
  
    > button + button,
    > button + bs-btn-group,
    > bs-btn-group + button,
    > bs-btn-group + bs-btn-group {
      margin-top: -1px;
      margin-left: 0;
    }
  }
  
  bs-btn-group[vertical] > button {
    &:not(:first-child):not(:last-child) {
      border-radius: 0;
    }
    &:first-child:not(:last-child) {
      border-top-right-radius: @border-radius-base;
      .border-bottom-radius(0);
    }
    &:last-child:not(:first-child) {
      border-bottom-left-radius: @border-radius-base;
      .border-top-radius(0);
    }
  }
  bs-btn-group[vertical] > bs-btn-group:not(:first-child):not(:last-child) > button {
    border-radius: 0;
  }
  bs-btn-group[vertical] > bs-btn-group:first-child:not(:last-child) {
    > button:last-child,
    > .dropdown-toggle {
      .border-bottom-radius(0);
    }
  }
  bs-btn-group[vertical] > bs-btn-group:last-child:not(:first-child) > button:first-child {
    .border-top-radius(0);
  }
  
  
  // Justified button groups
  // ----------------------
  
  bs-btn-group-justified {
    display: table;
    width: 100%;
    table-layout: fixed;
    border-collapse: separate;
    > button,
    > bs-btn-group {
      float: none;
      display: table-cell;
      width: 1%;
    }
    > bs-btn-group button {
      width: 100%;
    }
  
    > bs-btn-group .dropdown-menu {
      left: auto;
    }
  }
}

// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

[data-toggle="buttons"] {
  > button,
  > bs-btn-group > button {
    input[type="radio"],
    input[type="checkbox"] {
      position: absolute;
      clip: rect(0,0,0,0);
      pointer-events: none;
    }
  }
}
